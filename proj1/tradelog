#!/bin/sh

# tradelog
# author: Martin Zmitko, xzmitk01
# 1st IOS project, a shell utility for processing trading logs

POSIXLY_CORRECT=yes
LC_ALL=C

after_date="1970-01-01 00:00:00"
before_date="2038-01-19 03:14:06"

help_msg () {
    echo "Usage: tradelog [-h|--help] [FILTERS] [COMMAND] [LOG [LOG2 [...]]"
    echo
    echo "COMMAND can be one of:"
    echo "list-tick – list of all tickers"
    echo "profit – profit from all closed positions"
    echo "pos – list of values of all currently held positions sorted descending by value"
    echo "last-price – list of last currently known prices for tickers"
    echo "hist-ord – histograms of number of transactions by tickers"
    echo "graph-pos – graph of values of currently held positions by tickers"
    echo
    echo "FILTER can be one of:"
    echo "-a DATETIME – after: only records AFTER the date are considered (excluding the date). The format of DATETIME is YYYY-MM-DD HH:MM:SS."
    echo "-b DATETIME – before: only records BEFORE the date are considered (excluding the date)"
    echo "-t TICKER – only records with the given ticker are considered, multiple tickers (each with -t) can be given"
    echo "-w WIDTH – sets the width of the longest line of graph listings (this filter can only be set once per execution)"
    echo "-h and --help - prints this message"
    exit 0
}

parseWidth () {
    #exit if width was already parsed
    if [ -n "$width" ]; then
        echo "ERROR: Width can only be set once!" 1>&2
        echo "Usage: tradelog [-h|--help] [FILTERS] [COMMAND] [LOG [LOG2 [...]]" 1>&2
        exit 1
    fi

    #exit if width isn't a valid number
    if [ "$1" -eq "$1" ] 2>/dev/null && [ "$1" -gt 0 ]; then
        return
    else
        echo "ERROR: Width has to be greater than 0!" 1>&2
        echo "Usage: tradelog [-h|--help] [FILTERS] [COMMAND] [LOG [LOG2 [...]]" 1>&2
        exit 1
    fi
}

parseCmd () {
    #exit if more commands than one were entered
    if [ -n "$cmd" ]; then
        echo "ERROR: Only one command is supported!" 1>&2
        echo "Usage: tradelog [-h|--help] [FILTERS] [COMMAND] [LOG [LOG2 [...]]" 1>&2
        exit 1
    fi

    cmd="$1"
}

#argument parsing
while [ $# -ge 1 ]; do
    case "$1" in
        -a)  shift; if [ "$(date -d "$1" +"%s")" -gt "$(date -d "$after_date" +"%s")" ]; then
                after_date="$1"; fi;;
        -b)  shift; if [ "$(date -d "$1" +"%s")" -lt "$(date -d "$before_date" +"%s")" ]; then
                before_date="$1"; fi;;
        -t)  shift; tickers="$tickers;$1";;
        -w)  shift; parseWidth "$1"; width="$1";;
        -h | --help) help_msg;;
        list-tick) parseCmd "list-tick";;
        profit) parseCmd "profit";;
        pos) parseCmd "pos";;
        last-price) parseCmd "last-price";;
        hist-ord) parseCmd "hist-ord";;
        graph-pos) parseCmd "graph-pos";;
        *)  files="$files;$1";;
    esac
    shift
done

#remove semicolon at the beginning of files and tickers
files=${files#;}
tickers=${tickers#;}

#if input files are set, save the contents to out, otherwise save stdin to out
IFS=";"
if [ -n "$files" ]; then
    for i in $files; do
        if [ -e "$i" ]; then
            if [ "$(printf '%s' "$i" | tail -c 3)" = ".gz" ]; then
                out="$out$(zcat "$i")
"
            else
                out="$out$(cat "$i")
"
            fi
        else
            echo "ERROR: File $i not found!" 1>&2
            exit 1
        fi
    done
else
    out=$(cat)
fi

#filter datesS
out=$(echo "$out" | awk -F ';' -v after="$after_date" -v before="$before_date" '{if ($1 > after && $1 < before) print}') 

#filter tickers
if [ -n "$tickers" ]; then
    out=$(echo "$out" | awk -F ';' -v TICKERS="$tickers" 'BEGIN{n = split(TICKERS, tickers)} 
                                                          {for(i = 1; i <= n; i++) if($2 == tickers[i]) print}')
fi

#do command
case "$cmd" in
    list-tick) echo "$out" | awk -F ';' '
        {
            if(ticker[$2]++ == 0) print($2);
        }' | sort;;
    profit) echo "$out" | awk -F ';' '
        {
            out += ($3 == "sell") ? $4 * $6 : -$4 * $6;
        } 
        END{
            printf("%.2f\n", out);
        }';;
    pos) echo "$out" | awk -F ';'  '
        {
            count[$2] += ($3 == "sell") ? -$6 : $6; 
            price[$2] = $4;
        } 
        END{
            for(var in count){
                len = length(sprintf("%.2f", count[var] * price[var])); 
                if(len > max) max = len;
            }
            for(var in count){
                printf("%-10s:%*.2f\n", var, max + 1, count[var] * price[var]);
            }
        }' | sort -r -n -t ':' -k 2;;
    last-price) echo "$out" | awk -F ';' '
        {
            price[$2] = $4;
            len = length(sprintf("%.2f", price[$2]));
            if(len > max) max = len;
        } 
        END{
            for(var in price){
                printf("%-10s:%*.2f\n", var, max + 1, price[var]);
            }
        }' | sort;;
    hist-ord) echo "$out" | awk -F ';' -v width="$width" '
        {
            count[$2]++;
            if(count[$2] > maxCount) maxCount = count[$2];
        } 
        END{
            for(var in count){
                printf("%-10s:", var); 
                max = (width == "") ? count[var] : int(width / maxCount * count[var]); 
                if(max > 0) printf(" ");
                for(i = 0; i < max; i++){
                    printf("#");
                } 
                printf("\n");
            }
        }' | sort;;
    graph-pos) echo "$out" | awk -F ';' -v width="$width" '
        {
            count[$2] += ($3 == "sell") ? -$6 : $6; 
            price[$2] = $4;
        } 
        END{
            for(var in count){
                absCount = (count[var] < 0) ? -count[var] : count[var];
                if(absCount * price[var] > maxCount) 
                    maxCount = absCount * price[var];
            }
            for(var in count){
                printf("%-10s:", var); 
                currPos = count[var] * price[var];
                if(currPos > 0) out = "#";
                else{
                    currPos = -currPos;
                    out = "!";
                }
                if(width == "") 
                    max = int(currPos / 1000);
                else 
                    max = int(width / maxCount * currPos); 
                if(max > 0) printf(" ");
                for(i = 0; i < max; i++){
                    printf("%s", out);
                } 
                printf("\n");
            }
        }' | sort;;
    *) echo "$out"
esac
